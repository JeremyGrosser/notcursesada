package Notcurses_Keys
   with Pure
is
   --  Synthesized input events, i.e. any input event we can report that isn't
   --  representative of some Unicode. This covers both keyboard and mouse events,
   --  as well as signals and even window events.

   --  Special composed key definitions. These values are added to 0x100000.
   type Key is (
      NCKEY_INVALID,
      NCKEY_RESIZE,
      NCKEY_UP,
      NCKEY_RIGHT,
      NCKEY_DOWN,
      NCKEY_LEFT,
      NCKEY_INS,
      NCKEY_DEL,
      NCKEY_BACKSPACE,
      NCKEY_PGDOWN,
      NCKEY_PGUP,
      NCKEY_HOME,
      NCKEY_END,
      NCKEY_F00,
      NCKEY_F01,
      NCKEY_F02,
      NCKEY_F03,
      NCKEY_F04,
      NCKEY_F05,
      NCKEY_F06,
      NCKEY_F07,
      NCKEY_F08,
      NCKEY_F09,
      NCKEY_F10,
      NCKEY_F11,
      NCKEY_F12,
      NCKEY_F13,
      NCKEY_F14,
      NCKEY_F15,
      NCKEY_F16,
      NCKEY_F17,
      NCKEY_F18,
      NCKEY_F19,
      NCKEY_F20,
      NCKEY_F21,
      NCKEY_F22,
      NCKEY_F23,
      NCKEY_F24,
      NCKEY_F25,
      NCKEY_F26,
      NCKEY_F27,
      NCKEY_F28,
      NCKEY_F29,
      NCKEY_F30,
      NCKEY_F31,
      NCKEY_F32,
      NCKEY_F33,
      NCKEY_F34,
      NCKEY_F35,
      NCKEY_F36,
      NCKEY_F37,
      NCKEY_F38,
      NCKEY_F39,
      NCKEY_F40,
      NCKEY_F41,
      NCKEY_F42,
      NCKEY_F43,
      NCKEY_F44,
      NCKEY_F45,
      NCKEY_F46,
      NCKEY_F47,
      NCKEY_F48,
      NCKEY_F49,
      NCKEY_F50,
      NCKEY_F51,
      NCKEY_F52,
      NCKEY_F53,
      NCKEY_F54,
      NCKEY_F55,
      NCKEY_F56,
      NCKEY_F57,
      NCKEY_F58,
      NCKEY_F59,
      NCKEY_F60,
      --  ... leave room for up to 100 function keys, egads
      NCKEY_ENTER,
      NCKEY_CLS,
      NCKEY_DLEFT,
      NCKEY_DRIGHT,
      NCKEY_ULEFT,
      NCKEY_URIGHT,
      NCKEY_CENTER,
      NCKEY_BEGIN,
      NCKEY_CANCEL,
      NCKEY_CLOSE,
      NCKEY_COMMAND,
      NCKEY_COPY,
      NCKEY_EXIT,
      NCKEY_PRINT,
      NCKEY_REFRESH,
      NCKEY_SEPARATOR,
      --  these keys aren't generally available outside of the kitty protocol
      NCKEY_CAPS_LOCK,
      NCKEY_SCROLL_LOCK,
      NCKEY_NUM_LOCK,
      NCKEY_PRINT_SCREEN,
      NCKEY_PAUSE,
      NCKEY_MENU,
      --  media keys, similarly only available through kitty's protocol
      NCKEY_MEDIA_PLAY,
      NCKEY_MEDIA_PAUSE,
      NCKEY_MEDIA_PPAUSE,
      NCKEY_MEDIA_REV,
      NCKEY_MEDIA_STOP,
      NCKEY_MEDIA_FF,
      NCKEY_MEDIA_REWIND,
      NCKEY_MEDIA_NEXT,
      NCKEY_MEDIA_PREV,
      NCKEY_MEDIA_RECORD,
      NCKEY_MEDIA_LVOL,
      NCKEY_MEDIA_RVOL,
      NCKEY_MEDIA_MUTE,
      --  modifiers when pressed by themselves. this ordering comes from the Kitty
      --  keyboard protocol, and mustn't be changed without updating handlers.
      NCKEY_LSHIFT,
      NCKEY_LCTRL,
      NCKEY_LALT,
      NCKEY_LSUPER,
      NCKEY_LHYPER,
      NCKEY_LMETA,
      NCKEY_RSHIFT,
      NCKEY_RCTRL,
      NCKEY_RALT,
      NCKEY_RSUPER,
      NCKEY_RHYPER,
      NCKEY_RMETA,
      NCKEY_L3SHIFT,
      NCKEY_L5SHIFT,
      --  mouse events. We encode which button was pressed into the char32_t,
      --  but position information is embedded in the larger ncinput event.
      NCKEY_MOTION,
      NCKEY_BUTTON1,
      NCKEY_BUTTON2,
      NCKEY_BUTTON3,
      NCKEY_BUTTON4,
      NCKEY_BUTTON5,
      NCKEY_BUTTON6,
      NCKEY_BUTTON7,
      NCKEY_BUTTON8,
      NCKEY_BUTTON9,
      NCKEY_BUTTON10,
      NCKEY_BUTTON11,

      --  we received SIGCONT
      NCKEY_SIGNAL,

      --  indicates that we have reached the end of input. any further calls
      --  will continute to return this immediately.
      NCKEY_EOF);

   for Key use (
      NCKEY_INVALID     => 0,
      NCKEY_RESIZE      => 1, --  we received SIGWINCH
      NCKEY_UP          => 2,
      NCKEY_RIGHT       => 3,
      NCKEY_DOWN        => 4,
      NCKEY_LEFT        => 5,
      NCKEY_INS         => 6,
      NCKEY_DEL         => 7,
      NCKEY_BACKSPACE   => 8, --  backspace sometimes
      NCKEY_PGDOWN      => 9,
      NCKEY_PGUP        => 10,
      NCKEY_HOME        => 11,
      NCKEY_END         => 12,
      NCKEY_F00         => 20,
      NCKEY_F01         => 21,
      NCKEY_F02         => 22,
      NCKEY_F03         => 23,
      NCKEY_F04         => 24,
      NCKEY_F05         => 25,
      NCKEY_F06         => 26,
      NCKEY_F07         => 27,
      NCKEY_F08         => 28,
      NCKEY_F09         => 29,
      NCKEY_F10         => 30,
      NCKEY_F11         => 31,
      NCKEY_F12         => 32,
      NCKEY_F13         => 33,
      NCKEY_F14         => 34,
      NCKEY_F15         => 35,
      NCKEY_F16         => 36,
      NCKEY_F17         => 37,
      NCKEY_F18         => 38,
      NCKEY_F19         => 39,
      NCKEY_F20         => 40,
      NCKEY_F21         => 41,
      NCKEY_F22         => 42,
      NCKEY_F23         => 43,
      NCKEY_F24         => 44,
      NCKEY_F25         => 45,
      NCKEY_F26         => 46,
      NCKEY_F27         => 47,
      NCKEY_F28         => 48,
      NCKEY_F29         => 49,
      NCKEY_F30         => 50,
      NCKEY_F31         => 51,
      NCKEY_F32         => 52,
      NCKEY_F33         => 53,
      NCKEY_F34         => 54,
      NCKEY_F35         => 55,
      NCKEY_F36         => 56,
      NCKEY_F37         => 57,
      NCKEY_F38         => 58,
      NCKEY_F39         => 59,
      NCKEY_F40         => 60,
      NCKEY_F41         => 61,
      NCKEY_F42         => 62,
      NCKEY_F43         => 63,
      NCKEY_F44         => 64,
      NCKEY_F45         => 65,
      NCKEY_F46         => 66,
      NCKEY_F47         => 67,
      NCKEY_F48         => 68,
      NCKEY_F49         => 69,
      NCKEY_F50         => 70,
      NCKEY_F51         => 71,
      NCKEY_F52         => 72,
      NCKEY_F53         => 73,
      NCKEY_F54         => 74,
      NCKEY_F55         => 75,
      NCKEY_F56         => 76,
      NCKEY_F57         => 77,
      NCKEY_F58         => 78,
      NCKEY_F59         => 79,
      NCKEY_F60         => 80,
      --  ... leave room for up to 100 function keys, egads
      NCKEY_ENTER       => 121,
      NCKEY_CLS         => 122, --  "clear-screen or erase"
      NCKEY_DLEFT       => 123, --  down + left on keypad
      NCKEY_DRIGHT      => 124,
      NCKEY_ULEFT       => 125, --  up + left on keypad
      NCKEY_URIGHT      => 126,
      NCKEY_CENTER      => 127, --  the most truly neutral of keypresses
      NCKEY_BEGIN       => 128,
      NCKEY_CANCEL      => 129,
      NCKEY_CLOSE       => 130,
      NCKEY_COMMAND     => 131,
      NCKEY_COPY        => 132,
      NCKEY_EXIT        => 133,
      NCKEY_PRINT       => 134,
      NCKEY_REFRESH     => 135,
      NCKEY_SEPARATOR   => 136,
      --  these keys aren't generally available outside of the kitty protocol
      NCKEY_CAPS_LOCK      => 150,
      NCKEY_SCROLL_LOCK    => 151,
      NCKEY_NUM_LOCK       => 152,
      NCKEY_PRINT_SCREEN   => 153,
      NCKEY_PAUSE          => 154,
      NCKEY_MENU           => 155,
      --  media keys, similarly only available through kitty's protocol
      NCKEY_MEDIA_PLAY     => 158,
      NCKEY_MEDIA_PAUSE    => 159,
      NCKEY_MEDIA_PPAUSE   => 160,
      NCKEY_MEDIA_REV      => 161,
      NCKEY_MEDIA_STOP     => 162,
      NCKEY_MEDIA_FF       => 163,
      NCKEY_MEDIA_REWIND   => 164,
      NCKEY_MEDIA_NEXT     => 165,
      NCKEY_MEDIA_PREV     => 166,
      NCKEY_MEDIA_RECORD   => 167,
      NCKEY_MEDIA_LVOL     => 168,
      NCKEY_MEDIA_RVOL     => 169,
      NCKEY_MEDIA_MUTE     => 170,
      --  modifiers when pressed by themselves. this ordering comes from the Kitty
      --  keyboard protocol, and mustn't be changed without updating handlers.
      NCKEY_LSHIFT         => 171,
      NCKEY_LCTRL          => 172,
      NCKEY_LALT           => 173,
      NCKEY_LSUPER         => 174,
      NCKEY_LHYPER         => 175,
      NCKEY_LMETA          => 176,
      NCKEY_RSHIFT         => 177,
      NCKEY_RCTRL          => 178,
      NCKEY_RALT           => 179,
      NCKEY_RSUPER         => 180,
      NCKEY_RHYPER         => 181,
      NCKEY_RMETA          => 182,
      NCKEY_L3SHIFT        => 183,
      NCKEY_L5SHIFT        => 184,
      --  mouse events. We encode which button was pressed into the char32_t,
      --  but position information is embedded in the larger ncinput event.
      NCKEY_MOTION      => 200, --  no buttons pressed
      NCKEY_BUTTON1     => 201,
      NCKEY_BUTTON2     => 202,
      NCKEY_BUTTON3     => 203,
      NCKEY_BUTTON4     => 204, --  scrollwheel up
      NCKEY_BUTTON5     => 205, --  scrollwheel down
      NCKEY_BUTTON6     => 206,
      NCKEY_BUTTON7     => 207,
      NCKEY_BUTTON8     => 208,
      NCKEY_BUTTON9     => 209,
      NCKEY_BUTTON10    => 210,
      NCKEY_BUTTON11    => 211,

      --  we received SIGCONT
      NCKEY_SIGNAL      => 400,

      --  indicates that we have reached the end of input. any further calls
      --  will continute to return this immediately.
      NCKEY_EOF         => 500);

   --  Synonyms and aliases so far as we're concerned
   NCKEY_SCROLL_UP   : Key renames NCKEY_BUTTON4;
   NCKEY_SCROLL_DOWN : Key renames NCKEY_BUTTON5;
   NCKEY_RETURN      : Key renames NCKEY_ENTER;
   NCKEY_TAB         : constant := 16#09#;
   NCKEY_ESC         : constant := 16#1B#;
   NCKEY_SPACE       : constant := 16#20#;

   --  Rather than using one of the Private Use Areas of Unicode, we use the area
   --  beyond the 17 65536-entry Planes 1114112. We round up to 5000 so that it's
   --  trivial to identify synthesized characters based on their numeric definition
   --  here. This is safe, since we needn't convert these synthesized characters
   --  into UTF8 they would otherwise require more than four bytes.
   PRETERUNICODEBASE : constant := 1_115_000;

end Notcurses_Keys;
